openapi: 3.0.3
info:
  title: Проект самообучения API
  version: 1.0.0
  description: API платформы самообучения (курсы, материалы, тесты).
paths:
  /api/answers/:
    get:
      operationId: answers_list
      tags:
      - answers
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
          description: ''
    post:
      operationId: answers_create
      tags:
      - answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnswerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnswerRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
  /api/answers/{id}/:
    get:
      operationId: answers_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
    put:
      operationId: answers_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AnswerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AnswerRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
    patch:
      operationId: answers_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAnswerRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAnswerRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAnswerRequest'
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answer'
          description: ''
    delete:
      operationId: answers_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this answer.
        required: true
      tags:
      - answers
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '204':
          description: No response body
  /api/courses/:
    get:
      operationId: courses_list
      summary: Список курсов
      tags:
      - courses
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
          description: ''
    post:
      operationId: courses_create
      summary: Создать курс
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CourseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CourseRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /api/courses/{id}/:
    get:
      operationId: courses_retrieve
      summary: Курс
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    put:
      operationId: courses_update
      summary: Обновить курс
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CourseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CourseRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    patch:
      operationId: courses_partial_update
      summary: Частично обновить курс
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCourseRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCourseRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCourseRequest'
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    delete:
      operationId: courses_destroy
      summary: Удалить курс
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this course.
        required: true
      tags:
      - courses
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '204':
          description: No response body
  /api/materials/:
    get:
      operationId: materials_list
      tags:
      - materials
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Material'
          description: ''
    post:
      operationId: materials_create
      tags:
      - materials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaterialRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaterialRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaterialRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
          description: ''
  /api/materials/{id}/:
    get:
      operationId: materials_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this material.
        required: true
      tags:
      - materials
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
          description: ''
    put:
      operationId: materials_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this material.
        required: true
      tags:
      - materials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaterialRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MaterialRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MaterialRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
          description: ''
    patch:
      operationId: materials_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this material.
        required: true
      tags:
      - materials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMaterialRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMaterialRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMaterialRequest'
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
          description: ''
    delete:
      operationId: materials_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this material.
        required: true
      tags:
      - materials
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '204':
          description: No response body
  /api/questions/:
    get:
      operationId: questions_list
      tags:
      - questions
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
          description: ''
    post:
      operationId: questions_create
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
  /api/questions/{id}/:
    get:
      operationId: questions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    put:
      operationId: questions_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    patch:
      operationId: questions_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuestionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedQuestionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuestionRequest'
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    delete:
      operationId: questions_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this question.
        required: true
      tags:
      - questions
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '204':
          description: No response body
  /api/register/:
    post:
      operationId: register_create
      description: Создаёт нового пользователя. Пароль валидируется стандартными валидаторами
        Django.
      summary: Регистрация пользователя
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              ПримерЗапроса:
                value:
                  username: student1
                  password: Testpass123
                  email: student1@mail.com
                  first_name: Ivan
                  last_name: Petrov
                  role: student
                summary: Пример запроса
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
              examples:
                ПримерЗапроса:
                  value:
                    username: student1
                    password: Testpass123
                    email: student1@mail.com
                    first_name: Ivan
                    last_name: Petrov
                    role: student
                  summary: Пример запроса
          description: ''
  /api/schema/:
    get:
      operationId: schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - schema
      security:
      - jwtAuth: []
      - BearerAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/sections/:
    get:
      operationId: sections_list
      tags:
      - sections
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Section'
          description: ''
    post:
      operationId: sections_create
      tags:
      - sections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SectionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SectionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SectionRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
  /api/sections/{id}/:
    get:
      operationId: sections_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this section.
        required: true
      tags:
      - sections
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
    put:
      operationId: sections_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this section.
        required: true
      tags:
      - sections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SectionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SectionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SectionRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
    patch:
      operationId: sections_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this section.
        required: true
      tags:
      - sections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSectionRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSectionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSectionRequest'
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Section'
          description: ''
    delete:
      operationId: sections_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this section.
        required: true
      tags:
      - sections
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '204':
          description: No response body
  /api/tests/:
    get:
      operationId: tests_list
      tags:
      - tests
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Test'
          description: ''
    post:
      operationId: tests_create
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
          description: ''
  /api/tests/{id}/:
    get:
      operationId: tests_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this test.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
          description: ''
    put:
      operationId: tests_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this test.
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
          description: ''
    patch:
      operationId: tests_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this test.
        required: true
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTestRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTestRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTestRequest'
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
          description: ''
    delete:
      operationId: tests_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this test.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '204':
          description: No response body
  /api/tests/{id}/full/:
    get:
      operationId: tests_full_retrieve
      summary: Получить тест с вопросами и вариантами
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this test.
        required: true
      tags:
      - tests
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestFull'
          description: ''
  /api/tests/submit/:
    post:
      operationId: tests_submit_create
      summary: Отправить ответы на тест
      tags:
      - tests
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestSubmissionRequest'
            examples:
              ПримерОтправки:
                value:
                  test_id: 1
                  answers:
                  - question_id: 5
                    answer_id: 12
                  - question_id: 6
                    answer_id: 15
                summary: Пример отправки
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TestSubmissionRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TestSubmissionRequest'
        required: true
      security:
      - jwtAuth: []
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestResult'
              examples:
                ПримерОтправки:
                  value:
                    test_id: 1
                    answers:
                    - question_id: 5
                      answer_id: 12
                    - question_id: 6
                      answer_id: 15
                  summary: Пример отправки
          description: Результат проверки
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPairRequest'
        required: true
      security:
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      security:
      - BearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    Answer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
          maxLength: 255
        is_correct:
          type: boolean
        question:
          type: integer
      required:
      - id
      - question
      - text
    AnswerRequest:
      type: object
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 255
        is_correct:
          type: boolean
        question:
          type: integer
      required:
      - question
      - text
    AnswerShort:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
          maxLength: 255
      required:
      - id
      - text
    Course:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
      required:
      - id
      - title
    CourseRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
      required:
      - title
    Material:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        content:
          type: string
        section:
          type: integer
      required:
      - content
      - id
      - section
      - title
    MaterialRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
          minLength: 1
        section:
          type: integer
      required:
      - content
      - section
      - title
    PatchedAnswerRequest:
      type: object
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 255
        is_correct:
          type: boolean
        question:
          type: integer
    PatchedCourseRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
    PatchedMaterialRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
          minLength: 1
        section:
          type: integer
    PatchedQuestionRequest:
      type: object
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 255
        test:
          type: integer
    PatchedSectionRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        course:
          type: integer
    PatchedTestRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        material:
          type: integer
    Question:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
          maxLength: 255
        test:
          type: integer
      required:
      - id
      - test
      - text
    QuestionFull:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
          maxLength: 255
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswerShort'
          readOnly: true
      required:
      - answers
      - id
      - text
    QuestionRequest:
      type: object
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 255
        test:
          type: integer
      required:
      - test
      - text
    Register:
      type: object
      properties:
        username:
          type: string
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Адрес электронной почты
          maxLength: 254
        first_name:
          type: string
          title: Имя
          maxLength: 150
        last_name:
          type: string
          title: Фамилия
          maxLength: 150
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - username
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          title: Имя пользователя
          description: Обязательное поле. Не более 150 символов. Только буквы, цифры
            и символы @/./+/-/_.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        password:
          type: string
          writeOnly: true
          minLength: 1
        email:
          type: string
          format: email
          title: Адрес электронной почты
          maxLength: 254
        first_name:
          type: string
          title: Имя
          maxLength: 150
        last_name:
          type: string
          title: Фамилия
          maxLength: 150
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - password
      - username
    RoleEnum:
      enum:
      - admin
      - teacher
      - student
      type: string
      description: |-
        * `admin` - Администратор
        * `teacher` - Преподаватель
        * `student` - Студент
    Section:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        course:
          type: integer
      required:
      - course
      - id
      - title
    SectionRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        course:
          type: integer
      required:
      - course
      - title
    Test:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        material:
          type: integer
      required:
      - id
      - material
      - title
    TestFull:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionFull'
          readOnly: true
      required:
      - id
      - questions
      - title
    TestRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        material:
          type: integer
      required:
      - material
      - title
    TestResult:
      type: object
      properties:
        total_questions:
          type: integer
        correct_answers:
          type: integer
        score_percent:
          type: number
          format: double
      required:
      - correct_answers
      - score_percent
      - total_questions
    TestSubmissionRequest:
      type: object
      properties:
        test_id:
          type: integer
        answers:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
              minLength: 1
      required:
      - answers
      - test_id
    TokenObtainPair:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    TokenObtainPairRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
- name: auth
  description: Регистрация и JWT
- name: courses
  description: Курсы и разделы
- name: materials
  description: Материалы
- name: tests
  description: Тесты и вопросы
